#!/usr/bin/env ruby

# Submits code coverage reports to coveralls.io for Xcode based projects.
# Give same arguments as xcodebuild.
#
# Will submit to coveralls.io if running in a travis-ci build environment
# or if REPO_TOKEN is set. Otherwise ouput statistics to stdout.

# Copyright (c) 2013 <mattias.wadman@gmail.com>
#
# MIT License:
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require "open3"
require "pathname"
require "tmpdir"
require "tempfile"
require 'net/https'
require "json"
require "cgi"
require "uri"

# TODO:
# output source, html? cli?

def xcodebuild_settings(argv)
  cmd = ["xcodebuild", "-showBuildSettings"] + argv
  settings = {}
  _in, out, _err = Open3.popen3(*cmd)
  while not out.eof? do
    # format:
    # NAME = VALUE
    case out.readline
    when /^\s*(.*) = (.*)$/ then settings[$1] = $2
    end
  end

  settings
end

def git_commit_info(rev)
  Hash[[[:id, "%H"],
        [:author_name, "%an"],
        [:author_email, "%ae"],
        [:committer_name, "%cn"],
        [:committer_email, "%ce"],
        [:message, "%s"]].map do |key, format|
          cmd = ["git", "--no-pager", "show", "-s", "--format=#{format}", rev]
          _in, out, _err = Open3.popen3(*cmd)
          [key, out.read.strip]
        end]
end

def git_branch_for_name(name)
  cmd = ["git", "rev-parse", "--abbrev-ref", name]
  _in, out, _err = Open3.popen3(*cmd)
  out.read.strip
end

def git_remotes
  remotes = {}

  cmd = ["git", "remote", "-v"]
  _in, out, _err = Open3.popen3(*cmd)
  while not out.eof? do
    case out.readline
    when /^(.+)\t([^ ]+) \(fetch\)/
      next if $1 == "kerne"
      remotes[$1] = $2
    end
  end

  remotes
end

def gcov_parse_report(report)
  coverage = []
  source_lines = []
  headers = {}

  report.lines.each do |line|
    case line
    # format:
    #        -:    0:Key:Value has line number 0
    #        8:    1:executed line
    #    #####:    2:non-executed line
    #        -:    3:whitespace/comment line etc
    when /^\s*(-|\d+|#####):\s*(\d+):(.*)$/
      linenumber = $2.to_i

      if linenumber == 0
        keyvalue = $3
        key, value = keyvalue.split(":", 2)
        headers[key] = value
      else
        times = $1
        source_line = $3

        coverage.push(
          case times
          when "-" then nil
          when "#####" then 0
          when /\d+/ then times.to_i
          end
        )

        source_lines.push(source_line)
      end
    end

  end

  {:headers => headers,
   :coverage => coverage,
   :source_lines => source_lines}
end

def gcov_parse(object_dir, srcroot)
  gcovs = []

  # run gcov in temp directory
  Dir.mktmpdir do |dir|
    Dir.chdir(dir) do
      cmd = [
        "gcov",
        "--preserve-paths",
        "--object-directory", object_dir
      ] + Dir[File.join(srcroot, "**/*.{m,c,h,cpp,c++,cc,cp,cxx,hpp,mm}")]
      _in, out, _err = Open3.popen3(*cmd)
      while not out.eof? do
        # TODO: check for error?
        out.readline
      end

      Dir.glob("*") do |file|
        gcovs.push(gcov_parse_report(open(file).read()))
      end
    end
  end

  gcovs
end

def coveralls_data(reports, srcroot, env)
  is_travis = env.has_key? "TRAVIS_JOB_ID"

  data = {
    :git => {
      :head => git_commit_info("HEAD"),
      :branch => (is_travis ? env["TRAVIS_BRANCH"] : git_branch_for_name("HEAD")),
      :remotes => git_remotes.map do |name, url|
        {:name => name,
         :url => url}
      end
    },
    :source_files => reports.map do |report|
      {:name => Pathname(report[:headers]["Source"]).relative_path_from(Pathname(srcroot)),
       :source => report[:source_lines].join("\n"),
       :coverage => report[:coverage]}
    end,
    :run_at => Time.now.to_s
  }

  if is_travis
    data[:service_name] = "travis-ci"
    data[:service_job_id] = env["TRAVIS_JOB_ID"]
  else
    data[:service_name] = env["SERVICE_NAME"] or "gcoveralls"
    data[:repo_token] = env["REPO_TOKEN"] or ""
  end

  data
end

def build_multipart_request(parts)
  useragent = "gcoveralls"
  boundary = "boundary"
  content_type = "multipart/form-data; boundary=#{boundary}"
  headers = {"Content-Type" => content_type, "User-Agent" => useragent}

  body = parts.collect do |part|
    [
      "--" + boundary,
      "Content-Disposition: form-data; " +
      "name=\"#{CGI::escape(part[:name])}\"; " +
      "filename=\"#{part[:filename]}\"",
      "Content-Type: #{part[:content_type]}",
      "",
      part[:content],
      ""
    ].join("\r\n")
  end.join("") + "--" + boundary + "--"

  return headers, body
end

def coveralls_submit(coveralls_data)
  uri = URI("https://coveralls.io/api/v1/jobs")
  req = Net::HTTP.new(uri.host, uri.port)
  req.use_ssl = true

  begin
    req.start do |c|
      headers, body = build_multipart_request([{
        :name => "json_file",
        :filename => "json_file",
        :content_type => "application/octet-stream",
        :content => JSON.generate(coveralls_data)
      }])

      # TODO: retry?
      res = c.post(uri.path, body, headers)
      if res.body
        coveralls_res = JSON::parse(res.body)
        if coveralls_res.has_key? "error"
          return false, coveralls_res["message"]
        else
          return true, "#{coveralls_res["message"]} #{coveralls_res["url"]}"
        end
      else
        return false, res.message
      end

    end
  rescue StandardError => e
    return false, e
  end
end

def output_stats(gcov_reports, srcroot)
  srcroot_path = Pathname(srcroot)
  coverage_files = []

  gcov_reports.each do |report|
    path = Pathname(report[:headers]["Source"]).relative_path_from(srcroot_path)
    skipped_lines = 0
    code_lines = 0
    executed_lines = 0

    report[:coverage].each do |coverage|
      if coverage == nil
        skipped_lines += 1
      else
        code_lines +=1
        executed_lines += 1 if coverage > 0
      end
    end

    coverage_files.push({
      :path => path,
      :skipped_lines => skipped_lines,
      :code_lines => code_lines,
      :executed_lines => executed_lines,
      :percent => executed_lines.to_f / code_lines * 100
    })
  end

  total_code_lines = 0
  total_executed_lines = 0
  coverage_files.sort_by { |c| c[:percent] }.reverse.each do |c|
    puts "%7.2f%%  %s" % [c[:percent], c[:path]]
    total_code_lines += c[:code_lines]
    total_executed_lines += c[:executed_lines]
  end
  puts "=%6.2f%%" % [total_executed_lines.to_f / total_code_lines * 100]

end

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

settings = xcodebuild_settings(ARGV)
srcroot = settings["SRCROOT"]

gcov_data_path = File.join(settings["OBJECT_FILE_DIR_normal"], settings["CURRENT_ARCH"])
gcov_reports = gcov_parse(gcov_data_path, srcroot)
# only include reports about files under srcroot
gcov_reports.select! {|gcov| gcov[:headers]["Source"].start_with? srcroot}

if ENV.has_key? "TRAVIS_JOB_ID" or ENV.has_key? "REPO_TOKEN"
  result, message = coveralls_submit(coveralls_data(gcov_reports, srcroot, ENV))
  puts "#{result ? "OK" : "Failed"}: #{message}"
else
  output_stats(gcov_reports, srcroot)
end

