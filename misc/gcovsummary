#!/usr/bin/env ruby

require 'open3'
require 'pathname'

def xcodebuild_build_settings(target, objroot)
  settings = {}

  # parse:
  # NAME = VALUE
  _in, out, _err = Open3.popen3("xcodebuild -target \"#{target}\" -showBuildSettings \"OBJROOT=#{objroot}\"")
  while not out.eof? do
    case out.readline
    when /^\s*(.*) \= (.*)$/ then settings[$1] = $2
    end
  end

  settings
end

def gcov_coverages(object_dir, source_paths)
  coverages = {}
  path = nil
  percent = nil
  lines = nil

  # parse:
  # File 'path'
  # Lines executed:91.67% of 12
  _in, out, _err = Open3.popen3("gcov -n -o \"#{object_dir}\" #{source_paths.collect { |a| "\"#{a}\"" }.join(" ")}")
  while not out.eof? do
    case out.readline
    when /^File '(.*)'$/ then
      path = $1
    when /^Lines executed:(\d+.\d+)% of (\d+)$/ then
      percent = $1.to_f
      lines = $2.to_i

      coverages[path] = {
        :percent => percent,
        :lines => lines
      }
    end
  end

  coverages
end

def report(coverages, settings)
  srcroot = settings["SRCROOT"]
  coverages_sorted = coverages.sort_by { |path, coverage| coverage[:percent] }

  total_percent = 0
  total_count = 0
  coverages_sorted.reverse_each do |path, coverage|
    next if not path.start_with? srcroot

    relative_path = Pathname(path).relative_path_from(Pathname(srcroot))
    puts "%7.2f%%  %s" % [coverage[:percent], relative_path]

    total_percent += coverage[:percent]
    total_count += 1
  end

  if total_percent == 0 then
    puts "No coverage information"
    return
  end

  puts "=%6.2f%%" % [total_percent / total_count]
end

if ARGV.count < 2 then
  puts "Usage: #{$0} target-name objroot"
  exit
end

settings = xcodebuild_build_settings(ARGV[0], ARGV[1])
source_paths = Dir["**/*.{m,c,cpp,c++,mm}"]
gcov_data_path = File.join(settings["OBJECT_FILE_DIR_normal"], settings["CURRENT_ARCH"])
coverages = gcov_coverages(gcov_data_path, source_paths)

report(coverages, settings)

